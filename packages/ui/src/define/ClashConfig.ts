// Generated by https://quicktype.io

import { ClashProxyItem } from '$clash-utils'

export interface ClashConfig {
  'proxies': ClashProxyItem[]
  'proxy-groups': ProxyGroup[]
  'proxy-providers'?: ProxyProviders

  'rules': string[]
  'rule-providers'?: RuleProviders

  'port': number
  'socks-port': number
  'mixed-port': number
  'allow-lan': boolean
  'bind-address': string
  'mode': string
  'log-level': string
  'ipv6': boolean
  'external-controller': string
  'interface-name': string
  'hosts': null
  'dns': DNS
}

export interface DNS {
  'enable': boolean
  'listen': string
  'default-nameserver': string[]
  'enhanced-mode': string
  'fake-ip-range': string
  'nameserver': string[]
  'fallback-filter': FallbackFilter
}

export interface FallbackFilter {
  geoip: boolean
  ipcidr: null
}

export interface ProxyGroup {
  name: string
  use?: string[]
  proxies: string[]
  type: ProxyGroupType
  url?: string
  interval?: number
  filter?: string
}

export enum ProxyGroupType {
  UrlTest = 'url-test',
  Fallback = 'fallback',
  Select = 'select',
}

/**
  // 最快 / 可用 / 手选
  // Fastest / Available / Select
  generatedGroupNameLocale: 'zh-CN', // possible: zh-CN | en-US

  // 🚀 ✅ ✋🏻
  generatedGroupNameEmoji: true,
 */
export const ProxyGroupTypeConfig: Record<
  ProxyGroupType,
  { emoji: string; nameZh: string; nameEn: string }
> = {
  [ProxyGroupType.UrlTest]: {
    emoji: '🚀',
    nameZh: '最快',
    nameEn: 'Fastest',
  },
  [ProxyGroupType.Fallback]: {
    emoji: '✅',
    nameZh: '可用',
    nameEn: 'Available',
  },
  [ProxyGroupType.Select]: {
    emoji: '✋',
    nameZh: '手选',
    nameEn: 'Select',
  },
}

export interface ProxyProviders {
  [name: string]: ProxyProvider
}

export interface ProxyProvider {
  'type': 'file' | 'http'
  'path': string
  'url'?: string
  'interval'?: number
  'health-check': ProxyProviderHealthCheck
}

export interface ProxyProviderHealthCheck {
  enable: boolean
  url: string
}

export interface RuleProviders {
  [name: string]: RuleProvider
}

/**
 * @see https://dreamacro.github.io/clash/premium/rule-providers.html
 * @see https://wiki.metacubex.one/config/rules/rule-provider/
 */
export interface RuleProvider {
  behavior: 'domain' | 'ipcidr' | 'classical'
  type: 'file' | 'http'
  path: string
  url?: string
  format?: 'yaml' | 'text'
  interval?: number
}
